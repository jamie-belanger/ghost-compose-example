networks:
  ghost_platform:
    name: ghost_platform
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge

services:
  # Security-enhanced proxy for the Docker Socket
  socket_proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: socket_proxy
    restart: unless-stopped
    ports:
      - 2375:2375
    environment:
      NETWORKS: 1
      SERVICES: 1
      CONTAINERS: 1
      TASKS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - socket_proxy


  # Reverse proxy
  traefik:
    image: traefik:v3
    container_name: traefik
    restart: unless-stopped
    environment:
      # Cloudflare config
      - CF_API_EMAIL=${CLOUDFLARE_API_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}

      # Crowdsec config
      - BOUNCER_KEY_TRAEFIK=${BOUNCER_KEY_TRAEFIK}

    command:
      - "--log"
      - "--log.filePath=/logs/traefik.log"
      - "--accessLog.filePath=/logs/access.log"
      - "--accessLog.bufferingSize=100"
      - "--accessLog.fields.headers.defaultMode=keep"

      # Debug logging can be useful if you're having issues
      #- "--log.level=DEBUG"

      # In case you want to expose the dashboard:
      #- "--api.dashboard=true"
      #- "--api.debug=true"

      - "--providers.docker"
      - "--providers.docker.endpoint=tcp://socket_proxy:2375"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/traefik-sites.yml"
      - "--providers.file.watch=true"
      - "--providers.providersThrottleDuration=10"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Cloudflare: trusted IPs for forwarding user's IP address via headers
      - "--entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22"

      # Cloudflare - Let's Encrypt DNS challenge
      - "--entrypoints.websecure.http.tls.certresolver=cloudflare"
      - "--entrypoints.websecure.http.tls.domains[0].main=${BLOG_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${BLOG_DOMAIN}"
      - "--certificatesresolvers.cloudflare.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/acme/acme.json"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=300"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"

      # Staging server -- uncomment next line for testing
      #- "--certificatesresolvers.cloudflare.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      # Crowdsec integration
      - "--experimental.plugins.crowdsec-bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      - "--experimental.plugins.crowdsec-bouncer.version=${BOUNCER_VERSION}"
    ports:
      - 80:80
      - 443:443
      # Uncomment this if you want to expose it to the world, which I don't recommend.
      # But while testing, the Traefik dashboard can be useful
      #- 8080:8080
    volumes:
      # Local file provider for config
      - ./traefik/traefik-sites.yml:/etc/traefik/traefik-sites.yml:ro
      # SSL cert storage
      - ./traefik/certs:/acme
      # And an external place to write logs
      - ./traefik/logs:/logs
    labels:
      # Uncomment these if you want to expose the Traefik dashboard
      #- traefik.enable=true
      #- traefik.http.routers.api.rule=Host(`traefik.${BLOG_DOMAIN}`)
      #- traefik.http.routers.api.service=api@internal
      #- traefik.http.routers.api.entrypoints=websecure
      #- traefik.http.routers.api.tls=true

      # Crowdsec: Middleware configuration for bouncer
      - traefik.http.middlewares.bouncer.plugin.crowdsec-bouncer.crowdseclapikey=${BOUNCER_KEY_TRAEFIK}
    networks:
      - ghost_platform
      - socket_proxy
    depends_on:
      - socket_proxy
      - crowdsec

    # This allows us to reference other containers by name on a Linux host
    extra_hosts:
      - "host.docker.internal:host-gateway"


  # CrowdSec security engine
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: unless-stopped
    environment:
      GID: "${GID:-1000}"
      TZ: ${TIME_ZONE}
      ENROLL_KEY: ${CROWDSEC_CAPI_KEY}
      ENROLL_INSTANCE_NAME: ${CROWDSEC_CAPI_NAME}
      COLLECTIONS: "crowdsecurity/linux crowdsecurity/traefik"
      BOUNCER_KEY_TRAEFIK: ${BOUNCER_KEY_TRAEFIK}
      CUSTOM_HOSTNAME: crowdsec
    volumes:
      - ./crowdsec/database:/var/lib/crowdsec/data/
      - ./crowdsec/config:/etc/crowdsec
      # But we want to overwrite whatever is in there with our custom acquisition rules:
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      # And a whitelist that allows Let's Encrypt challenges through:
      - ./crowdsec/whitelists.yaml:/etc/crowdsec/whitelists.yaml
      # Install a custom scenario for banning people who scan the .well-known folder
      - ./crowdsec/scenarios/well-known-probing.yaml:/etc/crowdsec/scenarios/well-known-probing.yaml
      # Overwrite default profiles to load custom scenario and increase default ban duration
      - ./crowdsec/profiles.yaml:/etc/crowdsec/profiles.yaml
      # Finally we need read access to Traefik's logs
      - ./traefik/logs:/var/log/traefik/:ro
    labels:
      - "traefik.enable=false"
    networks:
      - ghost_platform

    # This allows us to reference other containers by name on a Linux host
    extra_hosts:
      - "host.docker.internal:host-gateway"


  mysql:
    image: mysql:9
    container_name: mysql
    volumes:
       - ./mysql:/var/lib/mysql:z  # Persist storage
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
    networks:
      - ghost_platform
    restart: always


  ghost:
    image: ghost:5
    container_name: ghost
    restart: unless-stopped

    environment:
      url: https://${BLOG_URL}
      database__client: mysql
      database__connection__host: ${DB_HOST}
      database__connection__user: ${DB_USER}
      database__connection__password: ${DB_PASS}
      database__connection__database: ${DB_NAME}
    volumes:
      - ./ghost/content:/var/lib/ghost/content
      - ./ghost/config.json:/var/lib/ghost/config.production.json
    labels:
      - traefik.enable=true
      - traefik.docker.network=ghost_platform
      - traefik.http.routers.ghost.entrypoints=websecure
      - traefik.http.routers.ghost.rule=Host(`${BLOG_URL}`)
      - traefik.http.routers.ghost.service=ghost@docker
      - traefik.http.services.ghost.loadbalancer.server.port=2368
    networks:
      - ghost_platform
    depends_on:
      - mysql
      - traefik

    # This allows us to reference other containers by name on a Linux host
    extra_hosts:
      - "host.docker.internal:host-gateway"
